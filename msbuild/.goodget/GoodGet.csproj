<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <OutputPath>bin\dummy\ignored</OutputPath>
    <ProjectGuid>{40E4104F-0495-4939-8A12-A3FB6D2CDFA4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AssemblyName>GoodGet-Ignore</AssemblyName>
    <DebugSymbols>false</DebugSymbols>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>
  <PropertyGroup>
    <NuGetToolsPath>$(MSBuildProjectDirectory)</NuGetToolsPath>
    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)\NuGet.exe</NuGetExePath>
    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>
  </PropertyGroup>
  <PropertyGroup>
    <PackageOutputDirectory Condition=" '$(PackageOutputDirectory)' == '' ">$(MSBuildProjectDirectory)\packages</PackageOutputDirectory>
    <RestoreExcludingVersion>true</RestoreExcludingVersion>
  </PropertyGroup>
  <ItemGroup>
    <None Include="packages.goodget.config" />
  </ItemGroup>
  
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  
  <PropertyGroup>
    <BuildDependsOn>
		RestorePackages;
		$(BuildDependsOn);
	  </BuildDependsOn>
  </PropertyGroup>
  
  <Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites">
	<PropertyGroup>
		<PackageConfigFile>$(OutputPath)\packages.config</PackageConfigFile>
	</PropertyGroup>
	
    <Copy SourceFiles="packages.goodget.config" DestinationFiles="$(PackageConfigFile)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
	
  </Target>
  
  <Target Name="CheckPrerequisites">
    <!--
	Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
	This effectively acts as a lock that makes sure that the download operation will only happen once and all
	parallel builds will have to wait for it to complete.
	-->
    <MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=NOT_IMPORTANT" />
  </Target>
  <Target Name="_DownloadNuGet">
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition=" !Exists('$(NuGetExePath)')" />
  </Target>
  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs"><![CDATA[
			try {
				OutputFilename = Path.GetFullPath(OutputFilename);

				Log.LogMessage("Downloading latest version of NuGet.exe...");
				WebClient webClient = new WebClient();
				webClient.DownloadFile("https://www.nuget.org/nuget.exe", OutputFilename);

				return true;
			}
			catch (Exception ex) {
				Log.LogErrorFromException(ex);
				return false;
			}
		]]></Code>
    </Task>
  </UsingTask>
  <Target Name="AfterBuild">
    <!-- Remove the dummy/temp output; but dont fail if not possible -->
    <Delete Files="$(OutputPath)$(AssemblyName).dll" TreatErrorsAsWarnings="true" />
    <Delete Files="$(OutputPath)packages.config" TreatErrorsAsWarnings="true" />
  </Target>
</Project>